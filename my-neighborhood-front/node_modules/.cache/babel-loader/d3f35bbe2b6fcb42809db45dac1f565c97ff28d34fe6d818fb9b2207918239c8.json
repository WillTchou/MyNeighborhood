{"ast":null,"code":"var _jsxFileName = \"/Users/willsbball/Desktop/Wilfried/Work/My-Neighborhood/my-neighborhood-front/src/Map.tsx\",\n  _s = $RefreshSig$();\nimport { GoogleMap, MarkerF } from '@react-google-maps/api';\nimport { useEffect, useState } from 'react';\nimport { requestService } from './requestService';\nimport { TypeEnum } from './models';\nimport { useNavigate } from 'react-router-dom';\nimport { volunteerService } from './volunteerService';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { userService } from './userService';\nimport { authService } from './authService';\nimport { RequestDrawer } from './RequestDrawer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nlet initialValue = {\n  id: '',\n  firstname: '',\n  lastname: '',\n  email: '',\n  password: '',\n  address: '',\n  governmentIdentityId: '',\n  profilePicture: ''\n};\nconst headers = {\n  Authorization: 'Bearer ' + authService.getToken()\n};\nexport const Map = () => {\n  _s();\n  const [latitude, setLatitude] = useState();\n  const [longitude, setLongitude] = useState();\n  const [requests, setRequests] = useState([]);\n  const [openSideBar, setOpenSideBar] = useState(false);\n  const [openPopin, setOpenPopin] = useState(false);\n  const [openMessage, setOpenMessage] = useState(true);\n  const [message, setMessage] = useState('');\n  const [user, setUser] = useState(initialValue);\n  const navigate = useNavigate();\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n  }, []);\n  useEffect(() => {\n    connect();\n    userService.getUserById(localStorage.getItem('userId')).then(res => res.data).then(result => setUser(result));\n  }, []);\n  useEffect(() => {\n    requestService.getRequests().then(res => res.data).then(result => setRequests(result));\n  }, []);\n  const center = {\n    lat: latitude,\n    lng: longitude\n  };\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect(headers, onConnected, onError);\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const onConnected = () => {\n    if (stompClient.status === 'CONNECTED') {\n      stompClient.subscribe('/chatroom/public', {});\n      stompClient.subscribe('/user/' + authService.getUserId() + '/private', {});\n    }\n  };\n  const sendPrivateValue = (event, request, message) => {\n    event.preventDefault();\n    if (stompClient) {\n      var chatMessage = {\n        sender: user,\n        recipient: request.requester,\n        content: message,\n        messageType: 'CHAT'\n      };\n      stompClient.send('/myNeighborhood/private-message', headers, JSON.stringify(chatMessage));\n    }\n    helpRequest(request.id);\n  };\n  const toggleDrawer = () => {\n    setOpenSideBar(prev => !prev);\n  };\n  const disableMessage = () => {\n    setOpenMessage(true);\n  };\n  const enableMessage = () => {\n    setOpenMessage(false);\n  };\n  const handleClickOpen = () => {\n    setOpenPopin(true);\n  };\n  const onClose = () => {\n    setOpenSideBar(false);\n  };\n  const handleClose = () => {\n    setOpenPopin(false);\n    disableMessage();\n  };\n  const redirectChatboxPage = () => {\n    navigate('/chatbox');\n  };\n  const handleMessage = event => {\n    event.preventDefault();\n    setMessage(event.target.value);\n  };\n  const helpRequest = requestId => {\n    volunteerService.createVolunteer(requestId).then(() => redirectChatboxPage());\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    zoom: 12,\n    center: center,\n    mapContainerStyle: {\n      width: '100%',\n      height: '100vh'\n    },\n    children: requests && requests.map(request => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MarkerF, {\n        position: {\n          lat: request.latitude,\n          lng: request.longitude\n        },\n        onClick: toggleDrawer,\n        icon: TypeEnum[request.type] === TypeEnum.OneTimeTask ? 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' : 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png'\n      }, request.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), openSideBar && /*#__PURE__*/_jsxDEV(RequestDrawer, {\n        open: openSideBar,\n        onClose: onClose,\n        request: request,\n        onSend: sendPrivateValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"R83tOvEJ8VoNR2m8Dw267clE7jQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["GoogleMap","MarkerF","useEffect","useState","requestService","TypeEnum","useNavigate","volunteerService","over","SockJS","userService","authService","RequestDrawer","jsxDEV","_jsxDEV","Fragment","_Fragment","stompClient","initialValue","id","firstname","lastname","email","password","address","governmentIdentityId","profilePicture","headers","Authorization","getToken","Map","_s","latitude","setLatitude","longitude","setLongitude","requests","setRequests","openSideBar","setOpenSideBar","openPopin","setOpenPopin","openMessage","setOpenMessage","message","setMessage","user","setUser","navigate","navigator","geolocation","getCurrentPosition","position","coords","connect","getUserById","localStorage","getItem","then","res","data","result","getRequests","center","lat","lng","Sock","onConnected","onError","err","console","log","status","subscribe","getUserId","sendPrivateValue","event","request","preventDefault","chatMessage","sender","recipient","requester","content","messageType","send","JSON","stringify","helpRequest","toggleDrawer","prev","disableMessage","enableMessage","handleClickOpen","onClose","handleClose","redirectChatboxPage","handleMessage","target","value","requestId","createVolunteer","zoom","mapContainerStyle","width","height","children","map","onClick","icon","type","OneTimeTask","fileName","_jsxFileName","lineNumber","columnNumber","open","onSend","_c","$RefreshReg$"],"sources":["/Users/willsbball/Desktop/Wilfried/Work/My-Neighborhood/my-neighborhood-front/src/Map.tsx"],"sourcesContent":["import { GoogleMap, MarkerF } from '@react-google-maps/api';\nimport { useEffect, useState } from 'react';\nimport { requestService } from './requestService';\nimport { ChatMessagePost, RequestGet, TypeEnum, User } from './models';\nimport { useNavigate } from 'react-router-dom';\nimport { volunteerService } from './volunteerService';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { userService } from './userService';\nimport { authService } from './authService';\nimport { RequestDrawer } from './RequestDrawer';\n\nvar stompClient = null;\nlet initialValue = {\n  id: '',\n  firstname: '',\n  lastname: '',\n  email: '',\n  password: '',\n  address: '',\n  governmentIdentityId: '',\n  profilePicture: ''\n};\nconst headers = {\n  Authorization: 'Bearer ' + authService.getToken()\n};\n\nexport const Map = () => {\n  const [latitude, setLatitude] = useState<number>();\n  const [longitude, setLongitude] = useState<number>();\n  const [requests, setRequests] = useState<RequestGet[]>([]);\n  const [openSideBar, setOpenSideBar] = useState(false);\n  const [openPopin, setOpenPopin] = useState(false);\n  const [openMessage, setOpenMessage] = useState(true);\n  const [message, setMessage] = useState('');\n  const [user, setUser] = useState<User>(initialValue);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n  }, []);\n\n  useEffect(() => {\n    connect();\n    userService\n      .getUserById(localStorage.getItem('userId'))\n      .then((res) => res.data)\n      .then((result) => setUser(result));\n  }, []);\n\n  useEffect(() => {\n    requestService\n      .getRequests()\n      .then((res) => res.data)\n      .then((result) => setRequests(result));\n  }, []);\n\n  const center = { lat: latitude, lng: longitude };\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect(headers, onConnected, onError);\n  };\n\n  const onError = (err) => {\n    console.log(err);\n  };\n\n  const onConnected = () => {\n    if (stompClient.status === 'CONNECTED') {\n      stompClient.subscribe('/chatroom/public', {});\n      stompClient.subscribe(\n        '/user/' + authService.getUserId() + '/private',\n        {}\n      );\n    }\n  };\n\n  const sendPrivateValue = (event, request: RequestGet, message: string) => {\n    event.preventDefault();\n    if (stompClient) {\n      var chatMessage: ChatMessagePost = {\n        sender: user,\n        recipient: request.requester,\n        content: message,\n        messageType: 'CHAT'\n      };\n      stompClient.send(\n        '/myNeighborhood/private-message',\n        headers,\n        JSON.stringify(chatMessage)\n      );\n    }\n    helpRequest(request.id);\n  };\n\n  const toggleDrawer = () => {\n    setOpenSideBar((prev) => !prev);\n  };\n\n  const disableMessage = () => {\n    setOpenMessage(true);\n  };\n\n  const enableMessage = () => {\n    setOpenMessage(false);\n  };\n\n  const handleClickOpen = () => {\n    setOpenPopin(true);\n  };\n\n  const onClose = () => {\n    setOpenSideBar(false);\n  };\n\n  const handleClose = () => {\n    setOpenPopin(false);\n    disableMessage();\n  };\n\n  const redirectChatboxPage = () => {\n    navigate('/chatbox');\n  };\n\n  const handleMessage = (event) => {\n    event.preventDefault();\n    setMessage(event.target.value);\n  };\n\n  const helpRequest = (requestId: string) => {\n    volunteerService\n      .createVolunteer(requestId)\n      .then(() => redirectChatboxPage());\n  };\n\n  return (\n    <GoogleMap\n      zoom={12}\n      center={center}\n      mapContainerStyle={{ width: '100%', height: '100vh' }}\n    >\n      {requests &&\n        requests.map((request) => (\n          <>\n            <MarkerF\n              key={request.id}\n              position={{ lat: request.latitude, lng: request.longitude }}\n              onClick={toggleDrawer}\n              icon={\n                TypeEnum[request.type] === TypeEnum.OneTimeTask\n                  ? 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                  : 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png'\n              }\n            />\n            {openSideBar && (\n              <RequestDrawer\n                open={openSideBar}\n                onClose={onClose}\n                request={request}\n                onSend={sendPrivateValue}\n              />\n            )}\n          </>\n        ))}\n    </GoogleMap>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}